<div>
    <WeatherDayInfo WeatherInfoHandler="this"></WeatherDayInfo>
    <br/>
    @if (LoadedData)
    {
        @if (isForecast)
        {
            <div>
                <button class="round-button" @onclick="PrevDay">Previous</button>
                <button class="round-button" @onclick="NextDay">Next</button>
            </div>
        }
    }
</div>
@code {
    [Parameter] public Weather WeatherHandler { get; set; }
    public WeatherInfoForDay? CurrentWeatherDay;
    private List<WeatherInfoForDay> ForecastDaysInfo;
    bool isForecast = false;
    private int CurrentDay;
    bool NavigationLimit = false;
    public bool LoadedData = false;
    public event Action OnNewDay;

    bool isLimit(bool GoNext)
    {
        if (GoNext)
            return CurrentDay + 1 >= ForecastDaysInfo.Count;
        return CurrentDay - 1 <= -1;
    }

    private void NextDay()
    {
        if (isLimit(true)) return;
        CurrentDay++;
        CurrentWeatherDay = ForecastDaysInfo[CurrentDay];
        Console.WriteLine("day " + CurrentDay);
        OnNewDay?.Invoke();
    }

    private void PrevDay()
    {
        if (isLimit(false)) return;
        CurrentDay--;
        CurrentWeatherDay = ForecastDaysInfo[CurrentDay];
        Console.WriteLine("day " + CurrentDay);
        OnNewDay?.Invoke();
    }

    protected override void OnInitialized()
    {
        WeatherHandler.OnWeatherLoaded += LoadWeatherInfo;
        WeatherHandler.OnForecastLoaded += LoadForecastInfo;
    }

    void LoadWeatherInfoForDay()
    {
        LoadedData = true;
        OnNewDay?.Invoke();
        StateHasChanged();
    }

    public void LoadWeatherInfo(WeatherInfoModel.Root data)
    {
        isForecast = false;
        CurrentWeatherDay = new WeatherInfoForDay(data.weather[0].description,
            (float)data.main.temp, (float)data.wind.speed, data.main.humidity);
        LoadWeatherInfoForDay();
    }

    public void LoadForecastInfo(List<WeatherForecastModel.WeatherForecast> data)
    {
        ForecastDaysInfo = new List<WeatherInfoForDay>();
        foreach (WeatherForecastModel.WeatherForecast DataForDay in data)
        {
            WeatherInfoForDay day = new WeatherInfoForDay(DataForDay.Weather[0].Description, DataForDay.Main.Temp, DataForDay.Wind.Speed, DataForDay.Main.Humidity);
            ForecastDaysInfo.Add(day);
        }
        isForecast = true;
        CurrentDay = -1;
        NextDay();
        LoadWeatherInfoForDay();
    }
}
