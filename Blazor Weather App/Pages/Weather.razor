@page "/"
@inject HttpClient Http
@using System.Text.Json
@inject IJSRuntime JS

<PageTitle>Weather</PageTitle>
<div class="container">
    <div class="form-container">
        <input placeholder="Enter City Name"  @bind-value="EnteredCityName"/>
        <button class="SearchButton" @onclick="OnButtonClick" disabled="@isRunning">Get Weather</button>
    </div>
    <button class="SearchButton" @onclick="GetLocation" disabled="@isRunning">Get my Location's Weather</button>
       <h1>@DisplayMessage</h1>
</div>
@if (isRunning) { <ProgressBar Value="@progressValue"></ProgressBar> }
<WeatherInfo WeatherHandler="@this"></WeatherInfo>

@code {
    private double Latitude { get; set; }
    private double Longitude { get; set; }
    private DotNetObjectReference<Weather>? dotNetHelper;
    private static readonly string apiKey = "522842c7690e98a044cc4bed41af40c5";
    private static readonly string baseUrl = "https://api.openweathermap.org/data/2.5/weather";
    private string? DisplayMessage;
    private string? LocationCityName;
    private string? EnteredCityName = string.Empty;
    private bool isRunning = false;
    private int progressValue = 0;
    private string? LocationInfo;
    public event EventHandler<WeatherInfoModel.Root> OnWeatherLoaded;
    private async Task OnButtonClick()
    {
        isRunning = true;
        await LoadWeatherForArea(EnteredCityName,InitProgress());
    }
    public async Task LoadWeatherForArea(string CityName,IProgress<int> progress)
    {
        string apiKey = "522842c7690e98a044cc4bed41af40c5";
        string url = $"https://api.openweathermap.org/data/2.5/weather?q={CityName}&appid={apiKey}&units=metric";
        HttpClient client = new HttpClient();
        HttpResponseMessage response = await client.GetAsync(url);
        progress.Report(65);
        await Task.Delay(300);
        var json = await response.Content.ReadAsStringAsync();
        WeatherInfoModel.Root? CurrentWeatherForeCast = JsonSerializer.Deserialize<WeatherInfoModel.Root>(json);
        OnWeatherLoaded?.Invoke(this,CurrentWeatherForeCast);
        DisplayMessage = "Weather summary for: " + CityName;
        progress.Report(100);
        await Task.Delay(500);
        isRunning = false;
    }
    Progress<int> InitProgress()
    {
        progressValue = 0;
        var progress = new Progress<int>(value =>
        {
            progressValue = value;
            StateHasChanged();
        });
        return progress;
    }
    private async Task GetCityName()
    {
        var progress = InitProgress();
        string apiUrl = $"https://nominatim.openstreetmap.org/reverse?format=json&lat={Latitude}&lon={Longitude}&zoom=10&addressdetails=1";
        try
        {
            await Task.Run(() => ProcessRequest(apiUrl,progress));
            string CountyName = JsonDocument.Parse(LocationInfo).RootElement.GetProperty("address").GetProperty("county").ToString();
            LocationCityName = CountyName.Replace("City of ", "");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        await Task.Run(() =>  LoadWeatherForArea(LocationCityName,progress));
        StateHasChanged();
    }

    private async Task ProcessRequest(string apiUrl,IProgress<int> progress)
    {
        HttpClient client = new HttpClient();
        HttpResponseMessage response = await client.GetAsync(apiUrl);
        progress.Report(10);
        LocationInfo = await response.Content.ReadAsStringAsync();
        progress.Report(30);
    }
    private async Task GetLocation()
    {
        isRunning = true;
        dotNetHelper = DotNetObjectReference.Create(this);
        await JS.InvokeVoidAsync("getGeolocation", dotNetHelper);
    }
    
    [JSInvokable]
    public void ReceiveLocation(double latitude, double longitude)
    {
        Latitude = latitude;
        Longitude = longitude; 
        GetCityName();
    }
    protected override void OnInitialized()
    {
        DisplayMessage = "Welcome, what would you like to see";
    }
    }