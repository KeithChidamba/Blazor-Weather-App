@page "/"
@inject HttpClient Http
@inject IJSRuntime JS
@using System.Text.Json
@using Newtonsoft.Json 
@using JsonSerializer = System.Text.Json.JsonSerializer

<PageTitle>Weather</PageTitle>
<!--<input placeholder="number of days for forecast" disabled="@AreaNotLoaded"  @bind-value="ForecastDaysAmount"/>-->
<div class="top-right">
    <input placeholder="Enter City Name"  @bind-value="EnteredCityName"/>
    <button class="SearchButton" @onclick="GetCityWeather" disabled="@isRunning">Get Weather</button>
    <button class="SearchButton" @onclick="GetAlertsForCity" disabled="@AreaNotLoaded">Get Weather Alerts</button>
    <button class="SearchButton" @onclick="GetCityNameLocation" disabled="@isRunning">Get my Location's Weather</button>
    <button class="SearchButton" @onclick="GetForeCast" disabled="@AreaNotLoaded">Get Forecast</button>
</div>

<h1 class="TitleHeader">@DisplayMessage</h1>
    @if(WeatherAlertMessage!=string.Empty)
        {<h1>Weather Warning: @WeatherAlertMessage</h1>}

@if (isRunning) { <ProgressBar Value="@progressValue"></ProgressBar> }
<br/>
    <WeatherInfo WeatherHandler="@this"></WeatherInfo>
@code {

    private float Latitude;
    private float Longitude;
    private DotNetObjectReference<Weather>? dotNetHelper;
    private static readonly string OpenWeatherApiKey = "9ccbafa11739fe75b7bbcb29da052335";
    private static readonly string WeatherApiKey = "5c81db43eed2421ca1f84712250703";
    private string? DisplayMessage;
    private string? WeatherAlertMessage = string.Empty;
    private string? EnteredCityName = string.Empty;
    private string? CityName = string.Empty;
    private bool isRunning = false;
    private bool AreaNotLoaded = true;
    private int progressValue = 0;
    public int? ForecastDaysAmount = 4;
    public event Action<WeatherInfoModel.Root> OnWeatherLoaded;
    public event Action<List<WeatherForecastModel.WeatherForecast>> OnForecastLoaded;
    private async Task GetCityWeather()
    {
        isRunning = true;
        CityName = EnteredCityName;
        await LoadWeatherForArea(CityName,InitProgress());
        await Task.Run(()=>GetCoordsOfCity());
    }
    private async Task GetCityNameLocation()
    {
        isRunning = true;
        await GetCityName();
    }

    private async Task GetAlertsForCity()
    {
       await GetWeatherAlerts(CityName);
    }
    public async Task<HttpResponseMessage> CallApi(string url)
    {
        try
        {
            return await Task.Run(()=>Http.GetAsync(url));
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }
    public async Task LoadWeatherForArea(string CityName,IProgress<int> progress)
    {
        HttpResponseMessage response = await CallApi($"https://api.openweathermap.org/data/2.5/weather?q={CityName}&appid={OpenWeatherApiKey}&units=metric");
        progress.Report(65);
        await Task.Delay(300);
        var json = await response.Content.ReadAsStringAsync();
        WeatherInfoModel.Root? data = JsonSerializer.Deserialize<WeatherInfoModel.Root>(json);
        OnWeatherLoaded?.Invoke(data);
        AreaNotLoaded = false;
        DisplayMessage = "Weather summary for " + CityName;
        progress.Report(100);
        await Task.Delay(500);
        isRunning = false;
    }
    Progress<int> InitProgress()
    {
        progressValue = 0;
        var progress = new Progress<int>(value =>
        {
            progressValue = value;
            StateHasChanged();
        });
        return progress;
    }
    private async Task GetCityName()
    {
        var progress = InitProgress();
        string apiUrl = $"https://nominatim.openstreetmap.org/reverse?format=json&lat={Latitude}&lon={Longitude}&zoom=10&addressdetails=1";
        var LocationInfo = await Task.Run(() => ProcessRequest(apiUrl,progress));
        string CountyName = JsonDocument.Parse(LocationInfo).RootElement.GetProperty("address").GetProperty("county").ToString();
        CityName = CountyName.Replace("City of ", "");
        await Task.Run(() =>  LoadWeatherForArea(CityName,progress));
        StateHasChanged();
    }

    private async Task<string> ProcessRequest(string apiUrl,IProgress<int> progress)
    {
        HttpResponseMessage response = await CallApi(apiUrl);
        progress.Report(10);
        await Task.Delay(300);
        progress.Report(30);
        return await response.Content.ReadAsStringAsync();
    }
    private async Task GetLocation()
    {
        dotNetHelper = DotNetObjectReference.Create(this);
        await JS.InvokeVoidAsync("getGeolocation", dotNetHelper);
    }
    public async Task GetForeCast()
    {
        var progress = InitProgress();
        string apiUrl = $"https://api.openweathermap.org/data/2.5/forecast?lat={Latitude}&lon={Longitude}&cnt={ForecastDaysAmount}&appid={OpenWeatherApiKey}";
        var ForecastInfo = await Task.Run(() => ProcessRequest(apiUrl,progress));
        WeatherForecastModel.WeatherData? rootData = JsonConvert.DeserializeObject<WeatherForecastModel.WeatherData>(ForecastInfo);
        List<WeatherForecastModel.WeatherForecast>? ForecastData = rootData.List;
        OnForecastLoaded?.Invoke(ForecastData);
    }
    public async Task GetWeatherAlerts(string CityName)
    {
        HttpResponseMessage response = await CallApi($"https://api.weatherapi.com/v1/alerts.json?key={WeatherApiKey}&q={CityName}");
        var jsonData = await response.Content.ReadAsStringAsync();
        var Alert = JsonDocument.Parse(jsonData).RootElement.GetProperty("alerts").GetProperty("alert");
        if (Alert.GetArrayLength() == 0)
        {
            WeatherAlertMessage = string.Empty;
            return;
        }
        WeatherAlertMessage = Alert[0].GetProperty("description").ToString();
    }
    [JSInvokable]
    public void ReceiveLocation(float latitude, float longitude)
    {
        Latitude = latitude;
        Longitude = longitude;
    }

    public async Task GetCoordsOfCity()
    {
        HttpResponseMessage response = await CallApi($"https://geocoding-api.open-meteo.com/v1/search?name={CityName}&count=1");
        var jsonData = await response.Content.ReadAsStringAsync();
        Latitude = float.Parse(JsonDocument.Parse(jsonData).RootElement.GetProperty("results")[0].GetProperty("latitude").ToString());
        Longitude = float.Parse(JsonDocument.Parse(jsonData).RootElement.GetProperty("results")[0].GetProperty("longitude").ToString());;
    }
    protected override void OnInitialized()
    {
        DisplayMessage = "Welcome, what would you like to see";
        AreaNotLoaded = true; 
        Task.Run( () => GetLocation());
    }
    
    }